---
import type Plans from "../types/plans.ts";
import type { Plan } from "../types/plans.ts";
import Icon from '../components/icon.astro';
import Subscribe from '../components/subscribe.astro';
import Check from 'heroicons/24/solid/check.svg?raw';
import Cross from 'heroicons/24/solid/x-mark.svg?raw';

const ICON_SIZE = 24;

interface Props {
	plans: Plans;
}

const { features, plans } = Astro.props.plans;

const has_feature = (plan: Plan, feature: string): boolean =>
	plan.features.includes(feature) ||
	(!!plan.extends && has_feature(plans[plan.extends], feature));

const COLUMNS = Object.keys(plans).length + 1;
const COLUMN_WIDTH = `${(1/(COLUMNS)) * 100}%`;
---

<table class="m-auto w-full">
	<colgroup>
		<col style={{width: COLUMN_WIDTH}} />
		{Object.keys(plans).map(_ => <col style={{width: COLUMN_WIDTH}} />)}
	</colgroup>
	<thead>
		<tr>
			<th class="sticky left-0 bg-white"><!-- Empty (top-left square of matrix) --></th>
			{Object.entries(plans).map(([_, p]) =>
				<th>
					<div class="flex flex-col">
						<div class="font-normal text-lg">{p.name}</div>
						<div class="font-bold text-3xl">{p.price.toFixed(2)} â‚¬</div>
					</div>
				</th>
			)}
		</tr>
	</thead>
	<tbody>
		{
			Object.entries(features).map(([id, name]) => (
				<tr class="border-b border-b-slate-200">
					<th class="sticky left-0 py-3 text-left font-light bg-white bg-clip-padding">{name}</th>
					{Object.values(plans).map((plan) => 
						<td>
							{has_feature(plan, id) ? 
								<Icon src={Check} class="text-sky-600 m-auto" width={ICON_SIZE} height={ICON_SIZE} /> :
								<Icon src={Cross} class="text-slate-300 m-auto" width={ICON_SIZE} height={ICON_SIZE} />
							}
						</td>
					)}
				</tr>
			))
		}
	</tbody>
	<tfoot>
		<tr>
			<th class="sticky left-0 bg-white"><!-- Empty (bottom-left square of matrix) --></th>
			{Object.entries(plans).map(([_, p]) =>
				<th>
					<Subscribe to={p.name}/>
				</th>
			)}
		</tr>
	</tfoot>
</table>